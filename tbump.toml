# Uncomment this if your project is hosted on GitHub:
github_url = "https://github.com/pik-primap/primap2/"

[version]
current = "0.11.2"

# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  '''

[git]
message_template = "Release version {new_version}"
tag_template = "v{new_version}"

# For each file to patch, add a [[file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
[[file]]
src = "setup.cfg"
search = 'version = {current_version}'

[[file]]
src = "primap2/__init__.py"
search = '__version__ = "{current_version}"'

[[file]]
src = "README.md"
search = 'pik-primap/primap2: PRIMAP2 Version {current_version}.'

[[file]]
src = "Makefile"
search = '\tSETUPTOOLS_SCM_PRETEND_VERSION={current_version}'

# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made

[[before_commit]]
name = "lint"
cmd = "make lint"

[[before_commit]]
name = "update github release notes"
cmd = "rm .github_release_notes_file.md; venv/bin/towncrier build --version {new_version} --draft --config towncrier_github_release_notes.toml > .github_release_notes_file.md"

[[before_commit]]
name = "update changelog"
cmd = "venv/bin/towncrier build --version {new_version} --yes"

# Or run some commands after the git tag and the branch
# have been pushed:

[[after_push]]
name = "release on github"
cmd = "gh release create --repo pik-primap/primap2 v{new_version} --title 'PRIMAP2 Version {new_version}' --notes-file .github_release_notes_file.md"
